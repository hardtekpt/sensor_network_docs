<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="comms____protocol__8h_8md" kind="file" language="Markdown">
    <compoundname>comms__protocol_8h.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">title:<sp/>comms_protocol.h</highlight></codeline>
<codeline><highlight class="normal">summary:<sp/>Header<sp/>file<sp/>for<sp/>the<sp/>communication<sp/>protocol<sp/>library.<sp/>Contains<sp/>the<sp/>used<sp/>data<sp/>structures,<sp/>function<sp/>declaration<sp/>and<sp/>general<sp/>configuartion<sp/>options<sp/>for<sp/>the<sp/>library.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>comms_protocol.h</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Header<sp/>file<sp/>for<sp/>the<sp/>communication<sp/>protocol<sp/>library.<sp/>Contains<sp/>the<sp/>used<sp/>data<sp/>structures,<sp/>function<sp/>declaration<sp/>and<sp/>general<sp/>configuartion<sp/>options<sp/>for<sp/>the<sp/>library.<sp/><sp/>[More...](#detailed-description)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Classes</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>--------------<sp/>|<sp/>--------------<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>struct<sp/>|<sp/>**[strPayload](/Node/Classes/structstr_payload/)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>struct<sp/>|<sp/>**[strMsg](/Node/Classes/structstr_msg/)**<sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Types</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>--------------<sp/>|<sp/>--------------<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>typedef<sp/>struct<sp/>[strPayload](/Node/Classes/structstr_payload/)<sp/>|<sp/>**[Payload](/Node/Files/comms__protocol_8h/#typedef-payload)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>typedef<sp/>struct<sp/>[strMsg](/Node/Classes/structstr_msg/)<sp/>|<sp/>**[Msg](/Node/Files/comms__protocol_8h/#typedef-msg)**<sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Functions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>--------------<sp/>|<sp/>--------------<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>void<sp/>|<sp/>**[LoRa_rxMode](/Node/Files/comms__protocol_8h/#function-lora-rxmode)**()&lt;br&gt;Sets<sp/>the<sp/>LoRa<sp/>radio<sp/>to<sp/>receive<sp/>mode.<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>void<sp/>|<sp/>**[LoRa_txMode](/Node/Files/comms__protocol_8h/#function-lora-txmode)**()&lt;br&gt;Sets<sp/>the<sp/>LoRa<sp/>radio<sp/>to<sp/>transmit<sp/>mode.<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>void<sp/>|<sp/>**[LoRa_sendMessage](/Node/Files/comms__protocol_8h/#function-lora-sendmessage)**(byte<sp/>*<sp/>message)&lt;br&gt;Sets<sp/>the<sp/>radio<sp/>to<sp/>transmit<sp/>mode,<sp/>sends<sp/>a<sp/>message<sp/>string<sp/>using<sp/>the<sp/>LoRa<sp/>radio<sp/>and<sp/>sets<sp/>the<sp/>radio<sp/>back<sp/>to<sp/>receive<sp/>mode.<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>char<sp/>*<sp/>|<sp/>**[decryptMsg](/Node/Files/comms__protocol_8h/#function-decryptmsg)**(String<sp/>msg)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>char<sp/>*<sp/>|<sp/>**[decryptMsg2](/Node/Files/comms__protocol_8h/#function-decryptmsg2)**(char<sp/>msg[MAX_PAYLOAD_SIZE+1])&lt;br&gt;Decrypts<sp/>a<sp/>message<sp/>string<sp/>using<sp/>the<sp/>AES256<sp/>algorythm<sp/>with<sp/>the<sp/>corresponding<sp/>node<sp/>key.<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>void<sp/>|<sp/>**[onReceive](/Node/Files/comms__protocol_8h/#function-onreceive)**(int<sp/>packetSize)&lt;br&gt;Called<sp/>every<sp/>time<sp/>a<sp/>new<sp/>message<sp/>is<sp/>received.<sp/>Filters<sp/>unwanted<sp/>messages,<sp/>decrypts<sp/>the<sp/>payload,<sp/>gets<sp/>the<sp/>relevant<sp/>fields<sp/>from<sp/>the<sp/>payload<sp/>and<sp/>sends<sp/>back<sp/>an<sp/>acknowledge<sp/>message<sp/>if<sp/>necessary.<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>void<sp/>|<sp/>**[onTxDone](/Node/Files/comms__protocol_8h/#function-ontxdone)**()<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>String<sp/>|<sp/>**[splitAndEncrypt](/Node/Files/comms__protocol_8h/#function-splitandencrypt)**(char<sp/>msg[MAX_PAYLOAD_SIZE])<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>void<sp/>|<sp/>**[sendSensorData](/Node/Files/comms__protocol_8h/#function-sendsensordata)**(byte<sp/>sensorID,<sp/>byte<sp/>sensorVal)&lt;br&gt;Adds<sp/>to<sp/>the<sp/>message<sp/>queue<sp/>an<sp/>uplink<sp/>message<sp/>containing<sp/>sensor<sp/>data.<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>void<sp/>|<sp/>**[getMsgFromQueueAndSend](/Node/Files/comms__protocol_8h/#function-getmsgfromqueueandsend)**(unsigned<sp/>long<sp/>currentMillis)&lt;br&gt;Get<sp/>a<sp/>message<sp/>from<sp/>the<sp/>send<sp/>queue<sp/>and<sp/>send<sp/>it.<sp/>Implements<sp/>retransmission<sp/>in<sp/>case<sp/>an<sp/>acknowledge<sp/>message<sp/>is<sp/>not<sp/>received.<sp/>Aware<sp/>of<sp/>a<sp/>failed<sp/>transmission.<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>void<sp/>|<sp/>**[sendStatus](/Node/Files/comms__protocol_8h/#function-sendstatus)**(byte<sp/>msgID)&lt;br&gt;Send<sp/>an<sp/>uplink<sp/>message<sp/>containing<sp/>the<sp/>node<sp/>status.<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>void<sp/>|<sp/>**[sendAck](/Node/Files/comms__protocol_8h/#function-sendack)**(byte<sp/>msgID)&lt;br&gt;Send<sp/>an<sp/>acknowledge<sp/>message<sp/>confirming<sp/>the<sp/>reception<sp/>of<sp/>an<sp/>uplink<sp/>transmission.<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>void<sp/>|<sp/>**[setActState](/Node/Files/comms__protocol_8h/#function-setactstate)**(int<sp/>ID,<sp/>int<sp/>val)&lt;br&gt;Sets<sp/>the<sp/>state<sp/>of<sp/>the<sp/>relevant<sp/>actuator<sp/>with<sp/>the<sp/>relevant<sp/>value.<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>int<sp/>|<sp/>**[mymin](/Node/Files/comms__protocol_8h/#function-mymin)**(int<sp/>a,<sp/>int<sp/>b)&lt;br&gt;returns<sp/>the<sp/>minimum<sp/>value<sp/>between<sp/>two<sp/>integers<sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Attributes</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>--------------<sp/>|<sp/>--------------<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>const<sp/>uint8_t<sp/>|<sp/>**[keyBroadcast](/Node/Files/comms__protocol_8h/#variable-keybroadcast)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>const<sp/>long<sp/>|<sp/>**[frequency](/Node/Files/comms__protocol_8h/#variable-frequency)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>const<sp/>int<sp/>|<sp/>**[txPower](/Node/Files/comms__protocol_8h/#variable-txpower)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>const<sp/>int<sp/>|<sp/>**[spreadingFactor](/Node/Files/comms__protocol_8h/#variable-spreadingfactor)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>const<sp/>long<sp/>|<sp/>**[signalBandwidth](/Node/Files/comms__protocol_8h/#variable-signalbandwidth)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>const<sp/>int<sp/>|<sp/>**[codingRateDenominator](/Node/Files/comms__protocol_8h/#variable-codingratedenominator)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>int<sp/>|<sp/>**[currMsg](/Node/Files/comms__protocol_8h/#variable-currmsg)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>int<sp/>|<sp/>**[count](/Node/Files/comms__protocol_8h/#variable-count)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>unsigned<sp/>long<sp/>|<sp/>**[prevMil](/Node/Files/comms__protocol_8h/#variable-prevmil)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>unsigned<sp/>long<sp/>|<sp/>**[prevMilSU](/Node/Files/comms__protocol_8h/#variable-prevmilsu)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>int<sp/>|<sp/>**[msgCount](/Node/Files/comms__protocol_8h/#variable-msgcount)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>cppQueue<sp/>|<sp/>**[msg_q](/Node/Files/comms__protocol_8h/#variable-msg-q)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>aes256_context<sp/>|<sp/>**[ctxt](/Node/Files/comms__protocol_8h/#variable-ctxt)**<sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Defines</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>--------------<sp/>|<sp/>--------------<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>|<sp/>**[IMPLEMENTATION](/Node/Files/comms__protocol_8h/#define-implementation)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>|<sp/>**[MAX_N_RETRY](/Node/Files/comms__protocol_8h/#define-max-n-retry)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>|<sp/>**[TIMEOUT_INTERVAL](/Node/Files/comms__protocol_8h/#define-timeout-interval)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>|<sp/>**[MAX_QUEUE_SIZE](/Node/Files/comms__protocol_8h/#define-max-queue-size)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>|<sp/>**[BLOCK_SIZE](/Node/Files/comms__protocol_8h/#define-block-size)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>|<sp/>**[MAX_PAYLOAD_SIZE](/Node/Files/comms__protocol_8h/#define-max-payload-size)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>|<sp/>**[ENC_BLOCK_SIZE](/Node/Files/comms__protocol_8h/#define-enc-block-size)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>|<sp/>**[MAX_ENC_PAYLOAD_SIZE](/Node/Files/comms__protocol_8h/#define-max-enc-payload-size)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>|<sp/>**[MAX_MSG_ID](/Node/Files/comms__protocol_8h/#define-max-msg-id)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>|<sp/>**[STATUS_UPDATE_INTERVAL](/Node/Files/comms__protocol_8h/#define-status-update-interval)**<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>|<sp/>**[BROADCAST_ID](/Node/Files/comms__protocol_8h/#define-broadcast-id)**<sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Detailed<sp/>Description</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Header<sp/>file<sp/>for<sp/>the<sp/>communication<sp/>protocol<sp/>library.<sp/>Contains<sp/>the<sp/>used<sp/>data<sp/>structures,<sp/>function<sp/>declaration<sp/>and<sp/>general<sp/>configuartion<sp/>options<sp/>for<sp/>the<sp/>library.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Author**:<sp/>Francisco<sp/>Santos<sp/>([francisco.velez@tecnico.ulisboa.pt](mailto:francisco.velez@tecnico.ulisboa.pt))<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Version**:<sp/>1.0<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Date**:<sp/>2022-08-10</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Copyright**:<sp/>Copyright<sp/>(c)<sp/>2022<sp/></highlight></codeline>
<codeline><highlight class="normal">##<sp/>Types<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>typedef<sp/>Payload</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>struct<sp/>strPayload<sp/>Payload;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>typedef<sp/>Msg</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>struct<sp/>strMsg<sp/>Msg;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Functions<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>LoRa_rxMode</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>LoRa_rxMode()</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>LoRa<sp/>radio<sp/>to<sp/>receive<sp/>mode.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Return**:<sp/>void<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>LoRa_txMode</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>LoRa_txMode()</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>LoRa<sp/>radio<sp/>to<sp/>transmit<sp/>mode.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Return**:<sp/>void<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>LoRa_sendMessage</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>LoRa_sendMessage(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>*<sp/>message</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>radio<sp/>to<sp/>transmit<sp/>mode,<sp/>sends<sp/>a<sp/>message<sp/>string<sp/>using<sp/>the<sp/>LoRa<sp/>radio<sp/>and<sp/>sets<sp/>the<sp/>radio<sp/>back<sp/>to<sp/>receive<sp/>mode.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters**:<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**message**<sp/>message<sp/>to<sp/>send<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Return**:<sp/>void<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>decryptMsg</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">char<sp/>*<sp/>decryptMsg(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>msg</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>decryptMsg2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">char<sp/>*<sp/>decryptMsg2(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>msg[MAX_PAYLOAD_SIZE+1]</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Decrypts<sp/>a<sp/>message<sp/>string<sp/>using<sp/>the<sp/>AES256<sp/>algorythm<sp/>with<sp/>the<sp/>corresponding<sp/>node<sp/>key.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters**:<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**msg**<sp/>message<sp/>string<sp/>to<sp/>be<sp/>decrypted<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Return**:<sp/>char*<sp/>an<sp/>array<sp/>of<sp/>characters<sp/>containing<sp/>the<sp/>decrypted<sp/>message<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>onReceive</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>onReceive(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>packetSize</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Called<sp/>every<sp/>time<sp/>a<sp/>new<sp/>message<sp/>is<sp/>received.<sp/>Filters<sp/>unwanted<sp/>messages,<sp/>decrypts<sp/>the<sp/>payload,<sp/>gets<sp/>the<sp/>relevant<sp/>fields<sp/>from<sp/>the<sp/>payload<sp/>and<sp/>sends<sp/>back<sp/>an<sp/>acknowledge<sp/>message<sp/>if<sp/>necessary.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters**:<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**packetSize**<sp/>size<sp/>of<sp/>the<sp/>incoming<sp/>message<sp/>in<sp/>bytes<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Return**:<sp/>void<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>onTxDone</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>onTxDone()</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>splitAndEncrypt</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">String<sp/>splitAndEncrypt(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>msg[MAX_PAYLOAD_SIZE]</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>sendSensorData</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>sendSensorData(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>sensorID,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>sensorVal</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Adds<sp/>to<sp/>the<sp/>message<sp/>queue<sp/>an<sp/>uplink<sp/>message<sp/>containing<sp/>sensor<sp/>data.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters**:<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**sensorID**<sp/>ID<sp/>of<sp/>the<sp/>relevant<sp/>sensor<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**sensorVal**<sp/>value<sp/>read<sp/>from<sp/>the<sp/>relevant<sp/>sensor<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Return**:<sp/>void<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note:<sp/>The<sp/>ADC<sp/>value<sp/>is<sp/>a<sp/>12-bit<sp/>number,<sp/>so<sp/>the<sp/>maximum<sp/>value<sp/>is<sp/>4095<sp/>(counting<sp/>from<sp/>0).<sp/>To<sp/>convert<sp/>the<sp/>ADC<sp/>integer<sp/>value<sp/>to<sp/>a<sp/>real<sp/>voltage<sp/>you’ll<sp/>need<sp/>to<sp/>divide<sp/>it<sp/>by<sp/>the<sp/>maximum<sp/>value<sp/>of<sp/>4095,<sp/>then<sp/>double<sp/>it<sp/>(note<sp/>above<sp/>that<sp/>Adafruit<sp/>halves<sp/>the<sp/>voltage),<sp/>then<sp/>multiply<sp/>that<sp/>by<sp/>the<sp/>reference<sp/>voltage<sp/>of<sp/>the<sp/>ESP32<sp/>which<sp/>is<sp/>3.3V<sp/>and<sp/>then<sp/>vinally,<sp/>multiply<sp/>that<sp/>again<sp/>by<sp/>the<sp/>ADC<sp/>Reference<sp/>Voltage<sp/>of<sp/>1100mV.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>getMsgFromQueueAndSend</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>getMsgFromQueueAndSend(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unsigned<sp/>long<sp/>currentMillis</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Get<sp/>a<sp/>message<sp/>from<sp/>the<sp/>send<sp/>queue<sp/>and<sp/>send<sp/>it.<sp/>Implements<sp/>retransmission<sp/>in<sp/>case<sp/>an<sp/>acknowledge<sp/>message<sp/>is<sp/>not<sp/>received.<sp/>Aware<sp/>of<sp/>a<sp/>failed<sp/>transmission.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters**:<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**currentMillis**<sp/>current<sp/>time<sp/>in<sp/>millisenconds<sp/>since<sp/>boot<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Return**:<sp/>void<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>sendStatus</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>sendStatus(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>msgID</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Send<sp/>an<sp/>uplink<sp/>message<sp/>containing<sp/>the<sp/>node<sp/>status.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters**:<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**msgID**<sp/>ID<sp/>of<sp/>the<sp/>status<sp/>request<sp/>message<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Return**:<sp/>void<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>sendAck</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>sendAck(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>msgID</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Send<sp/>an<sp/>acknowledge<sp/>message<sp/>confirming<sp/>the<sp/>reception<sp/>of<sp/>an<sp/>uplink<sp/>transmission.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters**:<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**msgID**<sp/>ID<sp/>of<sp/>the<sp/>message<sp/>being<sp/>acknowledged<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Return**:<sp/>void<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>setActState</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>setActState(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>ID,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>val</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>state<sp/>of<sp/>the<sp/>relevant<sp/>actuator<sp/>with<sp/>the<sp/>relevant<sp/>value.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters**:<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**ID**<sp/>ID<sp/>of<sp/>the<sp/>relevant<sp/>actuator<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**val**<sp/>value<sp/>to<sp/>which<sp/>the<sp/>actuator<sp/>is<sp/>set<sp/>to<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Return**:<sp/>void<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>mymin</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>mymin(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>a,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>b</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">returns<sp/>the<sp/>minimum<sp/>value<sp/>between<sp/>two<sp/>integers<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters**:<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**a**<sp/>first<sp/>integer<sp/>to<sp/>compare<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**b**<sp/>second<sp/>integer<sp/>to<sp/>compare<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Return**:<sp/>int<sp/>the<sp/>smaller<sp/>between<sp/>a<sp/>and<sp/>b<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Attributes<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>variable<sp/>keyBroadcast</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">const<sp/>uint8_t<sp/>keyBroadcast<sp/>=<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>0x00,<sp/>0x01,<sp/>0x02,<sp/>0x03,<sp/>0x04,<sp/>0x05,<sp/>0x06,<sp/>0x07,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>0x08,<sp/>0x09,<sp/>0x0a,<sp/>0x0b,<sp/>0x0c,<sp/>0x0d,<sp/>0x0e,<sp/>0x0f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>0x10,<sp/>0x11,<sp/>0x12,<sp/>0x13,<sp/>0x14,<sp/>0x15,<sp/>0x16,<sp/>0x17,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>0x18,<sp/>0x19,<sp/>0x1a,<sp/>0x1b,<sp/>0x1c,<sp/>0x1d,<sp/>0x1e,<sp/>0x0f</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>variable<sp/>frequency</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">const<sp/>long<sp/>frequency<sp/>=<sp/>868E6;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>variable<sp/>txPower</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">const<sp/>int<sp/>txPower<sp/>=<sp/>14;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>variable<sp/>spreadingFactor</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">const<sp/>int<sp/>spreadingFactor<sp/>=<sp/>7;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>variable<sp/>signalBandwidth</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">const<sp/>long<sp/>signalBandwidth<sp/>=<sp/>125E3;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>variable<sp/>codingRateDenominator</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">const<sp/>int<sp/>codingRateDenominator<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>variable<sp/>currMsg</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>currMsg;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>variable<sp/>count</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>count;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>variable<sp/>prevMil</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>prevMil;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>variable<sp/>prevMilSU</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>prevMilSU;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>variable<sp/>msgCount</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>msgCount;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>variable<sp/>msg_q</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">cppQueue<sp/>msg_q;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>variable<sp/>ctxt</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">aes256_context<sp/>ctxt;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>IMPLEMENTATION</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>IMPLEMENTATION<sp/>FIFO</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>MAX_N_RETRY</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MAX_N_RETRY<sp/>3</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>TIMEOUT_INTERVAL</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TIMEOUT_INTERVAL<sp/>1000</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>MAX_QUEUE_SIZE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MAX_QUEUE_SIZE<sp/>5</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>BLOCK_SIZE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>BLOCK_SIZE<sp/>16</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>MAX_PAYLOAD_SIZE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MAX_PAYLOAD_SIZE<sp/>16</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>ENC_BLOCK_SIZE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ENC_BLOCK_SIZE<sp/>(1*BLOCK_SIZE)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>MAX_ENC_PAYLOAD_SIZE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MAX_ENC_PAYLOAD_SIZE<sp/>((MAX_PAYLOAD_SIZE/BLOCK_SIZE)*ENC_BLOCK_SIZE)+1</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>MAX_MSG_ID</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MAX_MSG_ID<sp/>256</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>STATUS_UPDATE_INTERVAL</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>STATUS_UPDATE_INTERVAL<sp/>60000</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>BROADCAST_ID</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>BROADCAST_ID<sp/>0xFF</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Source<sp/>code</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>COMMS_PROTOCOL_H</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>COMMS_PROTOCOL_H</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;Arduino.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;SPI.h&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;LoRa.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;cppQueue.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;aes256.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;node_definitions.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/><sp/>IMPLEMENTATION<sp/><sp/>FIFO</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>LoRa<sp/>msg<sp/>payload<sp/>settings</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MAX_N_RETRY<sp/>3</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TIMEOUT_INTERVAL<sp/>1000</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MAX_QUEUE_SIZE<sp/>5</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>BLOCK_SIZE<sp/>16</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MAX_PAYLOAD_SIZE<sp/>16</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ENC_BLOCK_SIZE<sp/>(1*BLOCK_SIZE)</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MAX_ENC_PAYLOAD_SIZE<sp/>((MAX_PAYLOAD_SIZE/BLOCK_SIZE)*ENC_BLOCK_SIZE)+1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>MAX_MSG_ID<sp/>256</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>STATUS_UPDATE_INTERVAL<sp/>60000</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>BROADCAST_ID<sp/>0xFF</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Broadcast<sp/>Encryption<sp/>key</highlight></codeline>
<codeline><highlight class="normal">const<sp/>uint8_t<sp/>keyBroadcast[]<sp/>=<sp/>{<sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>0x00,<sp/>0x01,<sp/>0x02,<sp/>0x03,<sp/>0x04,<sp/>0x05,<sp/>0x06,<sp/>0x07,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>0x08,<sp/>0x09,<sp/>0x0a,<sp/>0x0b,<sp/>0x0c,<sp/>0x0d,<sp/>0x0e,<sp/>0x0f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>0x10,<sp/>0x11,<sp/>0x12,<sp/>0x13,<sp/>0x14,<sp/>0x15,<sp/>0x16,<sp/>0x17,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>0x18,<sp/>0x19,<sp/>0x1a,<sp/>0x1b,<sp/>0x1c,<sp/>0x1d,<sp/>0x1e,<sp/>0x0f</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>LoRa<sp/>Modem<sp/>Settings</highlight></codeline>
<codeline><highlight class="normal">const<sp/>long<sp/>frequency<sp/>=<sp/>868E6;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>int<sp/>txPower<sp/>=<sp/>14;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>int<sp/>spreadingFactor<sp/>=<sp/>7;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>long<sp/>signalBandwidth<sp/>=<sp/>125E3;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>int<sp/>codingRateDenominator<sp/>=<sp/>5;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">typedef<sp/>struct<sp/>strPayload<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>byte<sp/>nodeID;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>byte<sp/>sensorID;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>byte<sp/>msgID;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>char<sp/>flag;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>byte<sp/>sensorVal;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>RSSI;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>float<sp/>SNR;</highlight></codeline>
<codeline><highlight class="normal">}<sp/>Payload;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">typedef<sp/>struct<sp/>strMsg<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>byte<sp/>msg[MAX_ENC_PAYLOAD_SIZE];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>byte<sp/>msgID;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>char<sp/>flag;</highlight></codeline>
<codeline><highlight class="normal">}<sp/>Msg;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">extern<sp/>int<sp/>currMsg;</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>int<sp/>count;</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>unsigned<sp/>long<sp/>prevMil;</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>unsigned<sp/>long<sp/>prevMilSU;</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>int<sp/>msgCount;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">extern<sp/>cppQueue<sp/>msg_q;</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>aes256_context<sp/>ctxt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>LoRa_rxMode();</highlight></codeline>
<codeline><highlight class="normal">void<sp/>LoRa_txMode();</highlight></codeline>
<codeline><highlight class="normal">void<sp/>LoRa_sendMessage(byte<sp/>*message);</highlight></codeline>
<codeline><highlight class="normal">char<sp/><sp/>*decryptMsg(String<sp/>msg);</highlight></codeline>
<codeline><highlight class="normal">char<sp/><sp/>*decryptMsg2(char<sp/>msg[MAX_PAYLOAD_SIZE+1]);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>onReceive(int<sp/>packetSize);</highlight></codeline>
<codeline><highlight class="normal">void<sp/>onTxDone();</highlight></codeline>
<codeline><highlight class="normal">String<sp/>splitAndEncrypt(char<sp/>msg[MAX_PAYLOAD_SIZE]);</highlight></codeline>
<codeline><highlight class="normal">void<sp/>sendSensorData(byte<sp/>sensorID,<sp/>byte<sp/>sensorVal);</highlight></codeline>
<codeline><highlight class="normal">void<sp/>getMsgFromQueueAndSend(unsigned<sp/>long<sp/>currentMillis);</highlight></codeline>
<codeline><highlight class="normal">void<sp/>sendStatus(byte<sp/>msgID);</highlight></codeline>
<codeline><highlight class="normal">void<sp/>sendAck(byte<sp/>msgID);</highlight></codeline>
<codeline><highlight class="normal">void<sp/>setActState(int<sp/>ID,<sp/>int<sp/>val);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>mymin(int<sp/>a,<sp/>int<sp/>b);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Updated<sp/>on<sp/>2022-08-24<sp/>at<sp/>20:23:39<sp/>+0000</highlight></codeline>
    </programlisting>
    <location file="Files/comms__protocol_8h.md"/>
  </compounddef>
</doxygen>
