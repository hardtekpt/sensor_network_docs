<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="node__8ino_8md" kind="file" language="Markdown">
    <compoundname>node_8ino.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">title:<sp/>node.ino</highlight></codeline>
<codeline><highlight class="normal">summary:<sp/>Node<sp/>script<sp/>-<sp/>send<sp/>sensor<sp/>data<sp/>to<sp/>gateway<sp/>and<sp/>receive<sp/>commands<sp/>from<sp/>gateway.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>node.ino</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Node<sp/>script<sp/>-<sp/>send<sp/>sensor<sp/>data<sp/>to<sp/>gateway<sp/>and<sp/>receive<sp/>commands<sp/>from<sp/>gateway.<sp/><sp/>[More...](#detailed-description)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Functions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>--------------<sp/>|<sp/>--------------<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>void<sp/>|<sp/>**[setup](/Node/Files/node_8ino/#function-setup)**()&lt;br&gt;Arduino<sp/>setup<sp/>function.<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>void<sp/>|<sp/>**[loop](/Node/Files/node_8ino/#function-loop)**()&lt;br&gt;Arduino<sp/>loop<sp/>function.<sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Detailed<sp/>Description</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Node<sp/>script<sp/>-<sp/>send<sp/>sensor<sp/>data<sp/>to<sp/>gateway<sp/>and<sp/>receive<sp/>commands<sp/>from<sp/>gateway.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Author**:<sp/>Francisco<sp/>Santos<sp/>([francisco.velez@tecnico.ulisboa.pt](mailto:francisco.velez@tecnico.ulisboa.pt))<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Version**:<sp/>1.0<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Date**:<sp/>2022-08-09</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Copyright**:<sp/>Copyright<sp/>(c)<sp/>2022<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Functions<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>setup</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>setup()</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Arduino<sp/>setup<sp/>function.<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Function:<sp/>setup</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Runs<sp/>once<sp/>at<sp/>boot.<sp/>Configure<sp/>the<sp/>serial<sp/>communication.<sp/>Configure<sp/>the<sp/>LoRa<sp/>radio.<sp/>Configure<sp/>the<sp/>sensors<sp/>and<sp/>actuators<sp/>input<sp/>mode</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>loop</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>loop()</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Arduino<sp/>loop<sp/>function.<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Function:<sp/>loop</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Main<sp/>loop<sp/>function.<sp/>checks<sp/>for<sp/>incoming<sp/>uplink<sp/>messages<sp/>and<sp/>downlink<sp/>requests<sp/>from<sp/>the<sp/>server.<sp/>calls<sp/>getMsgFromQueueAndSend<sp/>on<sp/>fixed<sp/>schedules<sp/>to<sp/>avoid<sp/>congestion<sp/>of<sp/>the<sp/>communication<sp/>channel<sp/>and<sp/>sends<sp/>an<sp/>uplink<sp/>message<sp/>with<sp/>the<sp/>node<sp/>status<sp/>periodically.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Source<sp/>code</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;comms_protocol.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for(int<sp/>i=0;<sp/>i&lt;sensN;<sp/>i++){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pinMode(sensPin[i],<sp/>INPUT);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for(int<sp/>i=0;<sp/>i&lt;actN;<sp/>i++){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pinMode(actPin[i],<sp/>OUTPUT);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.begin(BAUD_RATE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>#if<sp/>defined(ESP32)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SPI.begin(SCK,<sp/>MISO,<sp/>MOSI,<sp/>SS);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//LoRa.setTxPower(txPower);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//LoRa.setSignalBandwidth(signalBandwidth);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//LoRa.setCodingRate4(codingRateDenominator);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LoRa.setPins(SS,<sp/>RST,<sp/>DIO0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!LoRa.begin(frequency))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(&quot;LoRa<sp/>init<sp/>failed.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>LoRa.setSpreadingFactor(7);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LoRa.setCodingRate4(8);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>LoRa.setSyncWord(netID);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LoRa.enableCrc();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LoRa_rxMode();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>prevMil<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>prevMilSU<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.println(&quot;Node<sp/>startup<sp/>complete&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sendSensorData(0,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>long<sp/>currentMillis<sp/>=<sp/>millis();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Receive<sp/>Downlink<sp/>msg</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>packetSize<sp/>=<sp/>LoRa.parsePacket();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(packetSize)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>onReceive(packetSize);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Send<sp/>Uplink<sp/>msg</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if((currentMillis-prevMil)<sp/>&gt;<sp/>TIMEOUT_INTERVAL){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>getMsgFromQueueAndSend(currentMillis);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Send<sp/>node<sp/>status</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if((currentMillis-prevMilSU)<sp/>&gt;<sp/>STATUS_UPDATE_INTERVAL){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>msgID<sp/>=<sp/>random(MAX_MSG_ID);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//sendStatus(msgID);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>prevMilSU<sp/>=<sp/>currentMillis;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Updated<sp/>on<sp/>2022-08-24<sp/>at<sp/>20:23:39<sp/>+0000</highlight></codeline>
    </programlisting>
    <location file="Files/node_8ino.md"/>
  </compounddef>
</doxygen>
